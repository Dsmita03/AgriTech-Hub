import express from "express";
import axios from "axios";

const router = express.Router();

// Perplexity API configuration
const PERPLEXITY_API_URL = "https://api.perplexity.ai/chat/completions";

// ‚úÖ Voice chatbot endpoint with Perplexity integration
router.post("/", async (req, res) => {
  try {
    const { conversation, fromLang = "en", toLang = "en" } = req.body;

    if (!conversation || !Array.isArray(conversation)) {
      return res.status(400).json({
        error: "Invalid conversation format",
        reply: getErrorMessage("invalid_format", fromLang),
      });
    }

    const lastMessage = conversation[conversation.length - 1];
    if (!lastMessage || lastMessage.role !== "user") {
      return res.status(400).json({
        error: "No user message found",
        reply: getErrorMessage("no_message", fromLang),
      });
    }

    const userQuery = lastMessage.text.toLowerCase();

    // Generate response using Perplexity API
    const reply = await generatePerplexityResponse(
      userQuery,
      fromLang,
      conversation
    );

    res.json({
      reply,
      conversation: [...conversation, { role: "ai", text: reply }],
      timestamp: new Date().toISOString(),
      powered_by: "Perplexity AI",
    });
  } catch (error) {
    console.error("Voice API Error:", error.response?.data || error.message);
    res.status(500).json({
      error: "Server error",
      reply: getErrorMessage("server_error", req.body.fromLang || "en"), // ‚úÖ fallback to English
    });
  }
});

// ‚úÖ Conversation history (future feature)
router.get("/history", (req, res) => {
  res.json({
    message: "Conversation history feature coming soon!",
    conversations: [],
  });
});

// ‚úÖ Clear conversation
router.delete("/clear", (req, res) => {
  res.json({
    message: "Conversation cleared successfully",
    success: true,
  });
});

// ‚úÖ Generate response using Perplexity API
async function generatePerplexityResponse(userQuery, language, conversation) {
  try {
    const systemPrompt = getAgricultureSystemPrompt(language);

    const messages = [
      { role: "system", content: systemPrompt },
      ...conversation.slice(-5).map((msg) => ({
        role: msg.role === "ai" ? "assistant" : msg.role,
        content: msg.text,
      })),
    ];

    const response = await axios.post(
      PERPLEXITY_API_URL,
      {
        model: "llama-3.1-sonar-small-128k-online",
        messages,
        max_tokens: 300,
        temperature: 0.7,
        top_p: 0.9,
        return_citations: true,
        search_domain_filter: ["agriculture", "farming", "crop", "soil"],
        search_recency_filter: "month",
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.PERPLEXITY_API_KEY}`,
          "Content-Type": "application/json",
        },
      }
    );

    if (response.data?.choices?.[0]?.message?.content) {
      let reply = response.data.choices[0].message.content;

      if (response.data.citations?.length > 0) {
        const citations = response.data.citations.slice(0, 2);
        reply += `\n\nüìö Sources: ${citations.join(", ")}`;
      }

      return reply;
    } else {
      return getFallbackResponse(userQuery, language);
    }
  } catch (error) {
    console.error("Perplexity API Error:", error.response?.data || error.message);
    return getFallbackResponse(userQuery, language);
  }
}

// ‚úÖ Agriculture system prompt
function getAgricultureSystemPrompt(language) {
  const prompts = {
    hi: `‡§Ü‡§™ ‡§è‡§ï ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§ï‡•É‡§∑‡§ø ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§π‡•à‡§Ç...`,
    en: `You are an expert agricultural assistant. 
- Provide practical advice
- Focus on Indian agricultural practices
- Use simple language
- Include weather/market info if possible
- Keep answers concise (2‚Äì3 sentences)`,
    bn: `‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑‡¶ú‡ßç‡¶û ‡¶ï‡ßÉ‡¶∑‡¶ø ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï...`,
  };

  return prompts[language] || prompts.en;
}

// ‚úÖ Fallback responses
function getFallbackResponse(query, language) {
  if (query.includes("weather") || query.includes("‡§Æ‡•å‡§∏‡§Æ") || query.includes("‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ")) {
    return getWeatherFallback(language);
  }
  if (query.includes("crop") || query.includes("‡§´‡§∏‡§≤") || query.includes("‡¶´‡¶∏‡¶≤")) {
    return getCropFallback(language);
  }
  if (query.includes("disease") || query.includes("‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä") || query.includes("‡¶∞‡ßã‡¶ó")) {
    return getDiseaseFallback(language);
  }
  return getDefaultResponse(language);
}

function getWeatherFallback(language) {
  const responses = {
    hi: "‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø ‡§Æ‡•å‡§∏‡§Æ ‡§µ‡§ø‡§≠‡§æ‡§ó ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§",
    en: "Check with your local weather department. Protect crops before rainfall.",
    bn: "‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ßÄ‡¶Ø‡¶º ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶¶‡¶™‡ßç‡¶§‡¶∞‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
  };
  return responses[language] || responses.en;
}

function getCropFallback(language) {
  const responses = {
    hi: "‡§´‡§∏‡§≤ ‡§ö‡•Å‡§®‡§§‡•á ‡§∏‡§Æ‡§Ø ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä, ‡§Æ‡•å‡§∏‡§Æ ‡§î‡§∞ ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§ï‡•Ä ‡§Æ‡§æ‡§Ç‡§ó ‡§¶‡•á‡§ñ‡•á‡§Ç‡•§",
    en: "Consider soil, weather, and market demand when choosing crops.",
    bn: "‡¶´‡¶∏‡¶≤ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶®‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶Æ‡¶æ‡¶ü‡¶ø, ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ö‡¶æ‡¶π‡¶ø‡¶¶‡¶æ ‡¶¨‡¶ø‡¶¨‡ßá‡¶ö‡¶®‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
  };
  return responses[language] || responses.en;
}

function getDiseaseFallback(language) {
  const responses = {
    hi: "‡§∞‡•ã‡§ó ‡§¶‡§ø‡§ñ‡§®‡•á ‡§™‡§∞ ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§ï‡•É‡§∑‡§ø ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞‡•Ä ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§",
    en: "If disease symptoms appear, contact the local agriculture officer immediately.",
    bn: "‡¶∞‡ßã‡¶ó‡ßá‡¶∞ ‡¶≤‡¶ï‡ßç‡¶∑‡¶£ ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶¶‡¶ø‡¶≤‡ßá ‡¶ï‡ßÉ‡¶∑‡¶ø ‡¶ï‡¶∞‡ßç‡¶Æ‡¶ï‡¶∞‡ßç‡¶§‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
  };
  return responses[language] || responses.en;
}

function getDefaultResponse(language) {
  const responses = {
    hi: "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ñ‡•á‡§§‡•Ä ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π‡§æ‡§Å ‡§π‡•Ç‡§Å‡•§",
    en: "I am here to help with your farming needs. Ask about crops, weather, or fertilizers.",
    bn: "‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡ßÉ‡¶∑‡¶ø‡¶ï‡¶æ‡¶ú‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶õ‡¶ø‡•§",
  };
  return responses[language] || responses.en;
}

function getErrorMessage(type, language) {
  const errorMessages = {
    invalid_format: {
      hi: "‡§Æ‡•Å‡§ù‡•á ‡§Ü‡§™‡§ï‡§æ ‡§∏‡§µ‡§æ‡§≤ ‡§∏‡§Æ‡§ù ‡§®‡§π‡•Ä‡§Ç ‡§Ü‡§Ø‡§æ‡•§",
      en: "I could not understand your question.",
      bn: "‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡¶®‡¶ø‡•§",
    },
    no_message: {
      hi: "‡§ï‡•ã‡§à ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§",
      en: "No message received.",
      bn: "‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§",
    },
    server_error: {
      hi: "‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•à‡•§",
      en: "There is a server issue. Please try again later.",
      bn: "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶Ü‡¶õ‡ßá‡•§",
    },
  };
  return errorMessages[type]?.[language] || errorMessages[type]?.en || "An error occurred.";
}

export default router;
