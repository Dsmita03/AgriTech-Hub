import express from "express";
import axios from "axios";

const router = express.Router();

// Perplexity API configuration
const PERPLEXITY_API_URL = "https://api.perplexity.ai/chat/completions";

// Optional: warn if key missing (won't crash)
if (!process.env.PERPLEXITY_API_KEY) {
  // eslint-disable-next-line no-console
  console.error(
    "[Voice API] Warning: PERPLEXITY_API_KEY is missing. The endpoint will return fallbacks."
  );
}

// POST /api/voice
router.post("/", async (req, res) => {
  try {
    const { conversation, fromLang = "en", toLang = "en" } = req.body || {};

    // Validate input
    if (!Array.isArray(conversation)) {
      return res.status(400).json({
        error: "Invalid conversation format",
        reply: getErrorMessage("invalid_format", fromLang),
      });
    }

    // Require last user message
    const lastMessage = conversation[conversation.length - 1];
    if (!lastMessage || lastMessage.role !== "user") {
      return res.status(400).json({
        error: "No user message found",
        reply: getErrorMessage("no_message", fromLang),
      });
    }

    const userQuery = (lastMessage.text ?? "").toString().trim().toLowerCase();

    // Generate reply (gracefully falls back on failure)
    const reply = await generatePerplexityResponse(userQuery, fromLang, conversation);

    return res.status(200).json({
      reply,
      conversation: [...conversation, { role: "ai", text: reply }],
      timestamp: new Date().toISOString(),
      powered_by: "Perplexity AI",
    });
  } catch (error) {
    // eslint-disable-next-line no-console
    console.error("Voice API Error:", error?.response?.data || error?.message || error);

    const language = (req.body && req.body.fromLang) || "en";
    // Still return 200 with a safe reply so client UX is consistent
    return res.status(200).json({
      error: "Server error",
      reply: getErrorMessage("server_error", language),
      timestamp: new Date().toISOString(),
      powered_by: "Perplexity AI",
    });
  }
});

// GET /api/voice/history (placeholder)
router.get("/history", (_req, res) => {
  res.json({
    message: "Conversation history feature coming soon!",
    conversations: [],
  });
});

// DELETE /api/voice/clear (stateless placeholder)
router.delete("/clear", (_req, res) => {
  res.json({
    message: "Conversation cleared successfully",
    success: true,
  });
});

// Core: call Perplexity with defensive logic
async function generatePerplexityResponse(userQuery, language, conversation) {
  try {
    const systemPrompt = getAgricultureSystemPrompt(language);

    // Build compact, clean messages: system + last 5 entries
    const recent = conversation
      .slice(-5)
      .map((msg) => ({
        role: msg.role === "ai" ? "assistant" : msg.role, // map "ai" -> "assistant"
        content: (msg.text ?? "").toString().trim(),
      }))
      .filter(
        (m) =>
          m.content.length > 0 &&
          (m.role === "user" || m.role === "assistant")
      );

    const messages = [{ role: "system", content: systemPrompt }, ...recent];

    // No key? Provide tailored fallback
    if (!process.env.PERPLEXITY_API_KEY) {
      return getFallbackResponse(userQuery, language);
    }

    const response = await axios.post(
      PERPLEXITY_API_URL,
      {
        model: "llama-3.1-sonar-small-128k-online",
        messages,
        max_tokens: 300,
        temperature: 0.7,
        top_p: 0.9,
        return_citations: true,
        // These filters can be restrictive. If responses are sparse, comment them out:
        // search_domain_filter: ["agriculture", "farming", "crop", "soil"],
        // search_recency_filter: "month",
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.PERPLEXITY_API_KEY}`,
          "Content-Type": "application/json",
        },
        timeout: 30000,
        validateStatus: (s) => s >= 200 && s < 500, // treat 4xx as handled
      }
    );

    if (response.status >= 400) {
      return getFallbackResponse(userQuery, language);
    }

    const content = response.data?.choices?.[0]?.message?.content;
    let reply = (content || "").toString().trim();

    if (!reply) {
      return getFallbackResponse(userQuery, language);
    }

    // Single, safe citations variable (no redeclaration)
    const cit =
      (Array.isArray(response.data?.citations) && response.data.citations) ||
      (Array.isArray(response.data?.choices?.messages?.citations) &&
        response.data.choices.message.citations) ||
      [];

    if (Array.isArray(cit) && cit.length > 0) {
      reply += `\n\nЁЯУЪ Sources: ${cit.slice(0, 2).join(", ")}`;
    }

    return reply;
  } catch (error) {
    // eslint-disable-next-line no-console
    console.error("Perplexity API Error:", error?.response?.data || error?.message || error);
    return getFallbackResponse(userQuery, language);
  }
}

// Prompts
function getAgricultureSystemPrompt(language) {
  const prompts = {
    hi: `рдЖрдк рдПрдХ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ рд╣реИрдВред
- рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рд╕рд▓рд╛рд╣ рджреЗрдВ
- рднрд╛рд░рддреАрдп рдХреГрд╖рд┐ рдкреНрд░рдерд╛рдУрдВ рдкрд░ рдзреНрдпрд╛рди рджреЗрдВ
- рд╕рд░рд▓ рднрд╛рд╖рд╛ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
- рдпрджрд┐ рд╕рдВрднрд╡ рд╣реЛ рддреЛ рдореМрд╕рдо/рдмрд╛рдЬрд╛рд░ рдХреА рдЬрд╛рдирдХрд╛рд░реА рд╢рд╛рдорд┐рд▓ рдХрд░реЗрдВ
- рдЙрддреНрддрд░ рд╕рдВрдХреНрд╖рд┐рдкреНрдд рд░рдЦреЗрдВ (2тАУ3 рд╡рд╛рдХреНрдп)`,
    en: `You are an expert agricultural assistant.
- Provide practical, actionable advice
- Focus on Indian agricultural practices when relevant
- Use simple, clear language
- Include weather/market info if helpful
- Keep answers concise (2тАУ3 sentences)`,
    bn: `ржЖржкржирж┐ ржПржХржЬржи ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ ржХрзГрж╖рж┐ рж╕рж╣рж╛ржпрж╝ржХред
- ржмрзНржпржмрж╣рж╛рж░рж┐ржХ ржкрж░рж╛ржорж░рзНрж╢ ржжрж┐ржи
- ржкрзНрж░ржпрж╝рзЛржЬржи ржЕржирзБржпрж╛ржпрж╝рзА ржнрж╛рж░рждрзАржпрж╝ ржХрзГрж╖рж┐ ржкрзНрж░ржерж╛рж░ ржЙржкрж░ ржЬрзЛрж░ ржжрж┐ржи
- рж╕рж╣ржЬ ржнрж╛рж╖рж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
- рж╕ржорзНржнржм рж╣рж▓рзЗ ржЖржмрж╣рж╛ржУржпрж╝рж╛/ржмрж╛ржЬрж╛рж░ рждржерзНржп ржпрзЛржЧ ржХрж░рзБржи
- ржЙрждрзНрждрж░ рж╕ржВржХрзНрж╖рж┐ржкрзНржд рж░рж╛ржЦрзБржи (рзитАУрзйржЯрж┐ ржмрж╛ржХрзНржп)`,
  };
  return prompts[language] || prompts.en;
}

// Fallbacks
function getFallbackResponse(query, language) {
  const q = (query || "").toString().toLowerCase();

  if (q.includes("weather") || q.includes("рдореМрд╕рдо") || q.includes("ржЖржмрж╣рж╛ржУржпрж╝рж╛")) {
    return getWeatherFallback(language);
  }
  if (q.includes("crop") || q.includes("рдлрд╕рд▓") || q.includes("ржлрж╕рж▓")) {
    return getCropFallback(language);
  }
  if (q.includes("disease") || q.includes("рдмреАрдорд╛рд░реА") || q.includes("рж░рзЛржЧ")) {
    return getDiseaseFallback(language);
  }
  return getDefaultResponse(language);
}

function getWeatherFallback(language) {
  const responses = {
    hi: "рдореМрд╕рдо рдХреА рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд▓рд┐рдП рд╕реНрдерд╛рдиреАрдп рдореМрд╕рдо рд╡рд┐рднрд╛рдЧ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред рдмрд╛рд░рд┐рд╢ рд╕реЗ рдкрд╣рд▓реЗ рдлрд╕рд▓ рдХреЛ рд╕реБрд░рдХреНрд╖рд╛ рджреЗрдВред",
    en: "Check your local weather service. Protect crops before rainfall.",
    bn: "рж╕рзНржерж╛ржирзАржпрж╝ ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржжржкрзНрждрж░ ржерзЗржХрзЗ рждржерзНржп ржирж┐ржиред ржмрзГрж╖рзНржЯрж┐рж░ ржЖржЧрзЗ ржлрж╕рж▓рзЗ рж╕рзБрж░ржХрзНрж╖рж╛ ржжрж┐ржиред",
  };
  return responses[language] || responses.en;
}

function getCropFallback(language) {
  const responses = {
    hi: "рдлрд╕рд▓ рдЪреБрдирддреЗ рд╕рдордп рдорд┐рдЯреНрдЯреА, рдореМрд╕рдо рдФрд░ рдмрд╛рдЬрд╛рд░ рдХреА рдорд╛рдВрдЧ рджреЗрдЦреЗрдВред рд╕рд┐рдВрдЪрд╛рдИ рдФрд░ рд▓рд╛рдЧрдд рднреА рдзреНрдпрд╛рди рд░рдЦреЗрдВред",
    en: "Choose crops based on soil, weather, and market demand. Consider irrigation and input costs.",
    bn: "ржорж╛ржЯрж┐, ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржУ ржмрж╛ржЬрж╛рж░ ржЪрж╛рж╣рж┐ржжрж╛ ржЕржирзБржпрж╛ржпрж╝рзА ржлрж╕рж▓ ржмрж╛ржЫрзБржиред рж╕рзЗржЪ ржУ ржЦрж░ржЪ ржмрж┐ржмрзЗржЪржирж╛ ржХрж░рзБржиред",
  };
  return responses[language] || responses.en;
}

function getDiseaseFallback(language) {
  const responses = {
    hi: "рд░реЛрдЧ рджрд┐рдЦрдиреЗ рдкрд░ рдкрддреНрддрд┐рдпреЛрдВ рдХреА рдлреЛрдЯреЛ рд▓реЗрдХрд░ рдХреГрд╖рд┐ рдЕрдзрд┐рдХрд╛рд░реА/рдХреГрд╖рд┐ рд╡рд┐рдЬреНрдЮрд╛рди рдХреЗрдВрджреНрд░ рд╕реЗ рд╕рд▓рд╛рд╣ рд▓реЗрдВред",
    en: "If disease symptoms appear, consult the local agriculture officer with clear leaf photos.",
    bn: "рж░рзЛржЧрзЗрж░ рж▓ржХрзНрж╖ржг ржжрзЗржЦрж╛ ржжрж┐рж▓рзЗ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржкрж╛рждрж╛рж░ ржЫржмрж┐ ржирж┐ржпрж╝рзЗ ржХрзГрж╖рж┐ ржХрж░рзНржоржХрж░рзНрждрж╛рж░ ржкрж░рж╛ржорж░рзНрж╢ ржирж┐ржиред",
  };
  return responses[language] || responses.en;
}

function getDefaultResponse(language) {
  const responses = {
    hi: "рдореИрдВ рдЖрдкрдХреА рдЦреЗрддреА рдореЗрдВ рдорджрдж рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдБ рд╣реВрдБред рдлрд╕рд▓, рдореМрд╕рдо рдпрд╛ рдЙрд░реНрд╡рд░рдХ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫреЗрдВред",
    en: "IтАЩm here to help with your farming needs. Ask about crops, weather, or fertilizers.",
    bn: "ржЖржорж┐ ржЖржкржирж╛рж░ ржХрзГрж╖рж┐ржХрж╛ржЬрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рж╛рж░ ржЬржирзНржп ржПржЦрж╛ржирзЗ ржЖржЫрж┐ред ржлрж╕рж▓, ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржмрж╛ рж╕рж╛рж░ рж╕ржорзНржкрж░рзНржХрзЗ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзБржиред",
  };
  return responses[language] || responses.en;
}

function getErrorMessage(type, language) {
  const errorMessages = {
    invalid_format: {
      hi: "рдореБрдЭреЗ рдЖрдкрдХрд╛ рд╕рд╡рд╛рд▓ рд╕рдордЭ рдирд╣реАрдВ рдЖрдпрд╛ред",
      en: "I could not understand your question.",
      bn: "ржЖржорж┐ ржЖржкржирж╛рж░ ржкрзНрж░рж╢рзНржи ржмрзБржЭрждрзЗ ржкрж╛рж░рж┐ржирж┐ред",
    },
    no_message: {
      hi: "рдХреЛрдИ рд╕рдВрджреЗрд╢ рдирд╣реАрдВ рдорд┐рд▓рд╛ред",
      en: "No message received.",
      bn: "ржХрзЛржирзЛ ржмрж╛рж░рзНрждрж╛ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред",
    },
    server_error: {
      hi: "рд╕рд░реНрд╡рд░ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реИред рдХреГрдкрдпрд╛ рдереЛрдбрд╝реА рджреЗрд░ рдмрд╛рдж рдлрд┐рд░ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред",
      en: "There is a server issue. Please try again later.",
      bn: "рж╕рж╛рж░рзНржнрж╛рж░рзЗ рж╕ржорж╕рзНржпрж╛ рж░ржпрж╝рзЗржЫрзЗред ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
    },
  };
  return (
    (errorMessages[type] && (errorMessages[type][language] || errorMessages[type].en)) ||
    "An error occurred."
  );
}

export default router;
